buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.


def username = "${mod_name}"
if (project.hasProperty('dev_mail')) {
    username = "${dev_mail}"
}
else if(project.hasProperty('dev_username')) {
    username = "${dev_username}"
}
def lucky_addon_folder = "lucky_blocks"
version = "${project.mc_version}-${project.mod_version}"
group= project.base_package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = project.mod_name

sourceCompatibility = targetCompatibility = project.jvm_version // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = project.jvm_version
}

repositories {
    maven {
        //JEI files
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }

    maven {
        //fallback for almost everything, this is CurseForge :P
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

String getChangelogText() {
    def changelogFile = new File('changelog.txt')
    String str = ''
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {
                return
            }
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}

configurations {
    coreLib
}

task luckyBlocks(type: Copy) {
    def lucky_addons = new File(lucky_addon_folder)
    if(!lucky_addons.exists()) lucky_addons.mkdirs()
    else {
        def dest = new File("${minecraft.runDir}/addons/lucky_block")
        if(!dest.exists()) dest.mkdirs()
        from(fileTree(lucky_addons))
        into(dest)
    }
}
tasks.setupDecompWorkspace.dependsOn luckyBlocks

def lib_folder = "libraries"
task fetch(type: Copy) {
    def lb = new File("${lib_folder}/luckyblock.zip")
    if (!lb.exists()) {
        new File("${lib_folder}").mkdirs()
        new URL("${project.lb_link}").withInputStream{ i -> lb.withOutputStream{ it << i }}
    }
}

minecraft {
    version = "${project.mc_version}-${project.forge_version}"
    if(file('../run').exists()) {
		runDir = "../run"
	}
	else
	{
		runDir = "run"
	}
    
    mappings = project.forge_mappings
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	replace "@VERSION@", project.mod_version
    replaceIn "Reference.java"

    //auto-configure the run arguments
    clientRunArgs += "--username=${username}"
    if(project.hasProperty('dev_password')) {
        clientRunArgs += " --password=${dev_password}"
    }
    serverRunArgs += "nogui"
}

dependencies {

    //lucky blocks: automatically downloaded into /lucky
    tasks.dependencies.dependsOn fetch
    runtime files("${lib_folder}/luckyblock.zip")

    coreLib "craftdev-core:craftdev-core:${project.mc_version}:${project.core_version}"

    // compile against the JEI API
    deobfCompile "mezz.jei:jei_${project.mc_version}:${project.jei_version}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${project.mc_version}:${project.jei_version}"

    //powerful spectrite armor
    runtime "spectrite:spectritemod:${project.spectrite_version}:${project.mc_version}"

    //shulker armor + bow
    runtime "shulker-armor:shulkerarmor:${project.shulker_armor_version}"

    //hammers
    runtime "sparks-hammers:sparkshammers:${project.mc_version}:${project.hammerz_version}"

    //op tools
    runtime "rubytools:rubytools:${project.ruby_version}"

    //OP weapons
    runtime "infused-weaponry:iweap:${project.iweap_version}"

    configurations.compile.extendsFrom(configurations.coreLib)
}

def curseRelations = { //TODO add other optional mods
    optionalLibrary 'just-enough-items-jei'
}

jar {
    into('/') {
        from configurations.coreLib
    }
    manifest.mainAttributes(
            "FMLAT": "${project.mod_name}_at.cfg",
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": version,
            "Built-On": "${mc_version}-${forge_version}",
            "ContainedDeps": "craftdev-core-${project.mc_version}-${project.core_version}.jar"
    )
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'resources'
		}
	}
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'mod/upcraftlp/playerluckyblocks/api/**/*'
    classifier = 'api'
}

task sourcesJar(type: Jar) {
    classifier = ' sources'
}

task javadocJar(type: Jar) {
    from javadoc.destinationDir
    classifier = ' javadoc'
}

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    if(project.hasProperty('sign_keyStore')) {
        keyPass = "${sign_keyPass}"
        keyStore = "${sign_keyStore}"
        storePass = "${sign_storePass}"
        alias = "${sign_alias}"
    }
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

tasks.build.dependsOn apiJar, sourcesJar, javadocJar, signJar

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    //ATs
    rename '(.+_at.cfg)', 'META-INF/$1'
}

curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    project {
        id = "${project.curse_id}"
        changelog = getChangelogText()
        releaseType = 'release'

        relations curseRelations

        addArtifact javadocJar
        addArtifact sourceJar
        addArtifact apiJar
    }
}
